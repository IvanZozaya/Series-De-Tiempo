# -*- coding: utf-8 -*-
"""Pregunta19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bY3smn9i5Hn2B06DNB3jAj16-bre-B3o
"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller, coint

# 1. Ask user for the xlsx file path
file_path = input("Enter the path to your Excel file (with GS3M and GS6M columns): ").strip()
df = pd.read_excel(file_path)

# Ensure columns GS3M, GS6M exist
if not {'GS3M', 'GS6M'}.issubset(df.columns):
    raise ValueError("File must contain 'GS3M' and 'GS6M' columns.")

# If there's a date column, parse it and set as index
possible_date_cols = [col for col in df.columns if 'date' in col.lower()]
if possible_date_cols:
    df[possible_date_cols[0]] = pd.to_datetime(df[possible_date_cols[0]])
    df.set_index(possible_date_cols[0], inplace=True)

# 2. Plot the two time series
plt.figure(figsize=(12, 6))
plt.plot(df['GS3M'], label='GS3M')
plt.plot(df['GS6M'], label='GS6M')
plt.title('GS3M vs GS6M Time Series')
plt.xlabel('Time')
plt.ylabel('Value')
plt.legend()
plt.tight_layout()
plt.show()

# 3. Unit Root Test (ADF)
def adf_test(series, name):
    result = adfuller(series.dropna())
    print(f"\nADF Test for {name}:")
    print("-" * 30)
    print(f"ADF Statistic: {result[0]:.4f}")
    print(f"p-value: {result[1]:.4f}")
    for key, value in result[4].items():
        print(f"Critical Value {key}: {value:.4f}")
    if result[1] < 0.05:
        print(f"Result: {name} is stationary (reject null hypothesis of unit root).")
    else:
        print(f"Result: {name} is NOT stationary (fail to reject null hypothesis).")

adf_test(df['GS3M'], 'GS3M')
adf_test(df['GS6M'], 'GS6M')

# 4. Cointegration Test (Engle-Granger)
score, pvalue, _ = coint(df['GS3M'], df['GS6M'])
print("\nCointegration Test (Engle-Granger):")
print("-" * 30)
print(f"Test Statistic: {score:.4f}")
print(f"p-value: {pvalue:.4f}")
if pvalue < 0.05:
    print("Result: The series are cointegrated (reject null of no cointegration).")
else:
    print("Result: The series are NOT cointegrated (fail to reject null of no cointegration).")