# -*- coding: utf-8 -*-
"""Pregunta18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xNiUz0jlkvPKX_6FW9boyU_bDKMwptWh
"""

import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm

# --- File upload section for notebook/Colab ---
try:
    from google.colab import files
    uploaded = files.upload()
    filename = next(iter(uploaded))
except ImportError:
    from IPython.display import display
    import ipywidgets as widgets

    upload_widget = widgets.FileUpload(accept='.xlsx', multiple=False)
    display(upload_widget)

    # Wait for file upload
    import time
    while not upload_widget.value:
        time.sleep(1)
    filename = list(upload_widget.value.keys())[0]
    with open(filename, 'wb') as f:
        f.write(upload_widget.value[filename]['content'])

# --- Data reading and cleaning ---
df = pd.read_excel(filename)

# Only keep rows where YEAR is valid (YYYY.Q format)
def is_valid_year(val):
    try:
        y, q = str(val).split('.')
        float(y)
        float(q)
        return True
    except Exception:
        return False

df = df[df['YEAR'].apply(is_valid_year)].copy()

def year_to_period(year_str):
    year, quarter = map(float, str(year_str).split('.'))
    return pd.Period(year=int(year), quarter=int(quarter), freq='Q')

df['YEAR'] = df['YEAR'].astype(str)
df.index = df['YEAR'].apply(year_to_period)
df = df.drop('YEAR', axis=1)

# Ensure all columns are numeric
for col in ["GDP", "PDI", "PCE", "PROFITS", "DIVIDENDS"]:
    df[col] = pd.to_numeric(df[col], errors='coerce')
df = df.dropna(subset=["GDP", "PDI", "PCE", "PROFITS", "DIVIDENDS"])

columns_to_analyze = ["GDP", "PDI", "PCE", "PROFITS", "DIVIDENDS"]

for col in columns_to_analyze:
    print(f"\n--- ARIMA Analysis for {col} ---")
    series = df[col]

    # Plot the series
    series.plot(title=f"{col} Time Series")
    plt.xlabel("Year")
    plt.ylabel(col)
    plt.show()

    # ADF test
    adf_result = sm.tsa.stattools.adfuller(series)
    print(f"ADF Statistic: {adf_result[0]}")
    print(f"p-value: {adf_result[1]}")
    for key, value in adf_result[4].items():
        print(f'Critical Value {key}: {value}')

    if adf_result[1] > 0.05:
        print("\nSeries is not stationary. Differencing...")
        series_for_arima = series.diff().dropna()
    else:
        series_for_arima = series

    model = sm.tsa.ARIMA(series, order=(1,1,1))
    results = model.fit()

    print(results.summary())

    results.plot_diagnostics(figsize=(10,8))
    plt.show()