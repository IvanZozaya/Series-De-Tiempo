# -*- coding: utf-8 -*-
"""Actividad 6 - 2.2 Pruebas de ra√≠z unitaria.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yyuNZs_lhdyqfWl26y0Wh5EwkKqF1Y9_
"""

# Google Colab Notebook: Upload Excel Files, ARIMA, Unit Root, Cointegration

# 1. Install and import necessary libraries
!pip install --quiet statsmodels openpyxl

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.stattools import adfuller, coint
from google.colab import files
import io

# 2. Upload files
print("Upload your Excel files (e.g., AAPL.xlsx, NVDA.xlsx, TSLA.xlsx, etc.)")
uploaded = files.upload()

# 3. Read 'Close' columns from each file and collect in a dictionary
data = {}
for fname in uploaded.keys():
    df = pd.read_excel(io.BytesIO(uploaded[fname]))
    # Try to find 'Close' column case-insensitively
    close_col = next((col for col in df.columns if col.lower() == 'close'), None)
    if close_col is None:
        raise ValueError(f"'Close' column not found in {fname}")
    # Store series with filename (without extension) as key
    key = fname.split('.')[0]
    data[key] = df[close_col].dropna().reset_index(drop=True)

# 4. Unit root test (ADF) for each series
print("\n== Augmented Dickey-Fuller (ADF) Unit Root Test Results ==")
adf_results = {}
for name, series in data.items():
    adf_result = adfuller(series)
    adf_results[name] = adf_result
    print(f"\n{name}:")
    print(f"  ADF Statistic: {adf_result[0]:.4f}")
    print(f"  p-value: {adf_result[1]:.4f}")
    print("  Stationary" if adf_result[1] < 0.05 else "  Non-stationary")

# 5. Fit ARIMA models for each series
print("\n== ARIMA(1,d,1) Model Summary for Each Series ==")
arima_models = {}
for name, series in data.items():
    d = 1 if adf_results[name][1] >= 0.05 else 0
    try:
        model = ARIMA(series, order=(1, d, 1))
        model_fit = model.fit()
        arima_models[name] = model_fit
        print(f"\n{name} ARIMA(1,{d},1):")
        print(model_fit.summary())
    except Exception as e:
        print(f"\n{name}: ARIMA model failed - {str(e)}")

# 6. Cointegration tests for all unique pairs
print("\n== Cointegration Test Results (Engle-Granger) ==")
names = list(data.keys())
for i in range(len(names)):
    for j in range(i+1, len(names)):
        name1, name2 = names[i], names[j]
        s1, s2 = data[name1].align(data[name2], join='inner')
        if len(s1) < 2: continue
        c_stat, pvalue, _ = coint(s1, s2)
        print(f"{name1} & {name2} - p-value: {pvalue:.4f} | {'Cointegrated' if pvalue < 0.05 else 'Not cointegrated'}")

# 7. (Optional) Plot closing prices
plt.figure(figsize=(12,6))
for name, series in data.items():
    plt.plot(series, label=name)
plt.title('Closing Prices')
plt.legend()
plt.show()